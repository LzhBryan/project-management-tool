/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as IndexImport } from './routes/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppUpcomingImport } from './routes/app/upcoming'
import { Route as AppTodayImport } from './routes/app/today'
import { Route as AppInboxImport } from './routes/app/inbox'
import { Route as authAuthImport } from './routes/(auth)/_auth'
import { Route as AppProjectsIndexImport } from './routes/app/projects/index'
import { Route as AppProjectsProjectIdImport } from './routes/app/projects/$projectId'
import { Route as authAuthRegisterImport } from './routes/(auth)/_auth.register'
import { Route as authAuthLoginImport } from './routes/(auth)/_auth.login'

// Create Virtual Routes

const authImport = createFileRoute('/(auth)')()

// Create/Update Routes

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppUpcomingRoute = AppUpcomingImport.update({
  id: '/upcoming',
  path: '/upcoming',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppTodayRoute = AppTodayImport.update({
  id: '/today',
  path: '/today',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppInboxRoute = AppInboxImport.update({
  id: '/inbox',
  path: '/inbox',
  getParentRoute: () => AppRouteRoute,
} as any)

const authAuthRoute = authAuthImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)

const AppProjectsIndexRoute = AppProjectsIndexImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppProjectsProjectIdRoute = AppProjectsProjectIdImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => AppRouteRoute,
} as any)

const authAuthRegisterRoute = authAuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authAuthRoute,
} as any)

const authAuthLoginRoute = authAuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authAuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthImport
      parentRoute: typeof authRoute
    }
    '/app/inbox': {
      id: '/app/inbox'
      path: '/inbox'
      fullPath: '/app/inbox'
      preLoaderRoute: typeof AppInboxImport
      parentRoute: typeof AppRouteImport
    }
    '/app/today': {
      id: '/app/today'
      path: '/today'
      fullPath: '/app/today'
      preLoaderRoute: typeof AppTodayImport
      parentRoute: typeof AppRouteImport
    }
    '/app/upcoming': {
      id: '/app/upcoming'
      path: '/upcoming'
      fullPath: '/app/upcoming'
      preLoaderRoute: typeof AppUpcomingImport
      parentRoute: typeof AppRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/(auth)/_auth/login': {
      id: '/(auth)/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authAuthLoginImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/register': {
      id: '/(auth)/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authAuthRegisterImport
      parentRoute: typeof authAuthImport
    }
    '/app/projects/$projectId': {
      id: '/app/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/app/projects/$projectId'
      preLoaderRoute: typeof AppProjectsProjectIdImport
      parentRoute: typeof AppRouteImport
    }
    '/app/projects/': {
      id: '/app/projects/'
      path: '/projects'
      fullPath: '/app/projects'
      preLoaderRoute: typeof AppProjectsIndexImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppInboxRoute: typeof AppInboxRoute
  AppTodayRoute: typeof AppTodayRoute
  AppUpcomingRoute: typeof AppUpcomingRoute
  AppIndexRoute: typeof AppIndexRoute
  AppProjectsProjectIdRoute: typeof AppProjectsProjectIdRoute
  AppProjectsIndexRoute: typeof AppProjectsIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppInboxRoute: AppInboxRoute,
  AppTodayRoute: AppTodayRoute,
  AppUpcomingRoute: AppUpcomingRoute,
  AppIndexRoute: AppIndexRoute,
  AppProjectsProjectIdRoute: AppProjectsProjectIdRoute,
  AppProjectsIndexRoute: AppProjectsIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface authAuthRouteChildren {
  authAuthLoginRoute: typeof authAuthLoginRoute
  authAuthRegisterRoute: typeof authAuthRegisterRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthLoginRoute: authAuthLoginRoute,
  authAuthRegisterRoute: authAuthRegisterRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof authAuthRouteWithChildren
  '/app': typeof AppRouteRouteWithChildren
  '/app/inbox': typeof AppInboxRoute
  '/app/today': typeof AppTodayRoute
  '/app/upcoming': typeof AppUpcomingRoute
  '/app/': typeof AppIndexRoute
  '/login': typeof authAuthLoginRoute
  '/register': typeof authAuthRegisterRoute
  '/app/projects/$projectId': typeof AppProjectsProjectIdRoute
  '/app/projects': typeof AppProjectsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof authAuthRouteWithChildren
  '/app/inbox': typeof AppInboxRoute
  '/app/today': typeof AppTodayRoute
  '/app/upcoming': typeof AppUpcomingRoute
  '/app': typeof AppIndexRoute
  '/login': typeof authAuthLoginRoute
  '/register': typeof authAuthRegisterRoute
  '/app/projects/$projectId': typeof AppProjectsProjectIdRoute
  '/app/projects': typeof AppProjectsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/app/inbox': typeof AppInboxRoute
  '/app/today': typeof AppTodayRoute
  '/app/upcoming': typeof AppUpcomingRoute
  '/app/': typeof AppIndexRoute
  '/(auth)/_auth/login': typeof authAuthLoginRoute
  '/(auth)/_auth/register': typeof authAuthRegisterRoute
  '/app/projects/$projectId': typeof AppProjectsProjectIdRoute
  '/app/projects/': typeof AppProjectsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/inbox'
    | '/app/today'
    | '/app/upcoming'
    | '/app/'
    | '/login'
    | '/register'
    | '/app/projects/$projectId'
    | '/app/projects'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app/inbox'
    | '/app/today'
    | '/app/upcoming'
    | '/app'
    | '/login'
    | '/register'
    | '/app/projects/$projectId'
    | '/app/projects'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/app/inbox'
    | '/app/today'
    | '/app/upcoming'
    | '/app/'
    | '/(auth)/_auth/login'
    | '/(auth)/_auth/register'
    | '/app/projects/$projectId'
    | '/app/projects/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  authRoute: typeof authRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  authRoute: authRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/(auth)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/inbox",
        "/app/today",
        "/app/upcoming",
        "/app/",
        "/app/projects/$projectId",
        "/app/projects/"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_auth"
      ]
    },
    "/(auth)/_auth": {
      "filePath": "(auth)/_auth.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_auth/login",
        "/(auth)/_auth/register"
      ]
    },
    "/app/inbox": {
      "filePath": "app/inbox.tsx",
      "parent": "/app"
    },
    "/app/today": {
      "filePath": "app/today.tsx",
      "parent": "/app"
    },
    "/app/upcoming": {
      "filePath": "app/upcoming.tsx",
      "parent": "/app"
    },
    "/app/": {
      "filePath": "app/index.tsx",
      "parent": "/app"
    },
    "/(auth)/_auth/login": {
      "filePath": "(auth)/_auth.login.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/register": {
      "filePath": "(auth)/_auth.register.tsx",
      "parent": "/(auth)/_auth"
    },
    "/app/projects/$projectId": {
      "filePath": "app/projects/$projectId.tsx",
      "parent": "/app"
    },
    "/app/projects/": {
      "filePath": "app/projects/index.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
